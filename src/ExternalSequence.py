# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ExternalSequence
else:
    import _ExternalSequence

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PI = _ExternalSequence.PI
TWO_PI = _ExternalSequence.TWO_PI
PATH_SEPARATOR = _ExternalSequence.PATH_SEPARATOR
ERROR_MSG = _ExternalSequence.ERROR_MSG
WARNING_MSG = _ExternalSequence.WARNING_MSG
NORMAL_MSG = _ExternalSequence.NORMAL_MSG
DEBUG_HIGH_LEVEL = _ExternalSequence.DEBUG_HIGH_LEVEL
DEBUG_MEDIUM_LEVEL = _ExternalSequence.DEBUG_MEDIUM_LEVEL
DEBUG_LOW_LEVEL = _ExternalSequence.DEBUG_LOW_LEVEL
DELAY = _ExternalSequence.DELAY
RF = _ExternalSequence.RF
GX = _ExternalSequence.GX
GY = _ExternalSequence.GY
GZ = _ExternalSequence.GZ
ADC = _ExternalSequence.ADC
EXT = _ExternalSequence.EXT
LAST_UNUSED = _ExternalSequence.LAST_UNUSED
class RFEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amplitude = property(_ExternalSequence.RFEvent_amplitude_get, _ExternalSequence.RFEvent_amplitude_set)
    magShape = property(_ExternalSequence.RFEvent_magShape_get, _ExternalSequence.RFEvent_magShape_set)
    phaseShape = property(_ExternalSequence.RFEvent_phaseShape_get, _ExternalSequence.RFEvent_phaseShape_set)
    freqOffset = property(_ExternalSequence.RFEvent_freqOffset_get, _ExternalSequence.RFEvent_freqOffset_set)
    phaseOffset = property(_ExternalSequence.RFEvent_phaseOffset_get, _ExternalSequence.RFEvent_phaseOffset_set)
    delay = property(_ExternalSequence.RFEvent_delay_get, _ExternalSequence.RFEvent_delay_set)

    def __init__(self):
        _ExternalSequence.RFEvent_swiginit(self, _ExternalSequence.new_RFEvent())
    __swig_destroy__ = _ExternalSequence.delete_RFEvent

# Register RFEvent in _ExternalSequence:
_ExternalSequence.RFEvent_swigregister(RFEvent)
cvar = _ExternalSequence.cvar
MSG_LEVEL = cvar.MSG_LEVEL
NUM_EVENTS = cvar.NUM_EVENTS
NUM_GRADS = cvar.NUM_GRADS

class GradEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amplitude = property(_ExternalSequence.GradEvent_amplitude_get, _ExternalSequence.GradEvent_amplitude_set)
    delay = property(_ExternalSequence.GradEvent_delay_get, _ExternalSequence.GradEvent_delay_set)
    rampUpTime = property(_ExternalSequence.GradEvent_rampUpTime_get, _ExternalSequence.GradEvent_rampUpTime_set)
    flatTime = property(_ExternalSequence.GradEvent_flatTime_get, _ExternalSequence.GradEvent_flatTime_set)
    rampDownTime = property(_ExternalSequence.GradEvent_rampDownTime_get, _ExternalSequence.GradEvent_rampDownTime_set)
    shape = property(_ExternalSequence.GradEvent_shape_get, _ExternalSequence.GradEvent_shape_set)

    def __init__(self):
        _ExternalSequence.GradEvent_swiginit(self, _ExternalSequence.new_GradEvent())
    __swig_destroy__ = _ExternalSequence.delete_GradEvent

# Register GradEvent in _ExternalSequence:
_ExternalSequence.GradEvent_swigregister(GradEvent)

class ADCEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numSamples = property(_ExternalSequence.ADCEvent_numSamples_get, _ExternalSequence.ADCEvent_numSamples_set)
    dwellTime = property(_ExternalSequence.ADCEvent_dwellTime_get, _ExternalSequence.ADCEvent_dwellTime_set)
    delay = property(_ExternalSequence.ADCEvent_delay_get, _ExternalSequence.ADCEvent_delay_set)
    freqOffset = property(_ExternalSequence.ADCEvent_freqOffset_get, _ExternalSequence.ADCEvent_freqOffset_set)
    phaseOffset = property(_ExternalSequence.ADCEvent_phaseOffset_get, _ExternalSequence.ADCEvent_phaseOffset_set)

    def __init__(self):
        _ExternalSequence.ADCEvent_swiginit(self, _ExternalSequence.new_ADCEvent())
    __swig_destroy__ = _ExternalSequence.delete_ADCEvent

# Register ADCEvent in _ExternalSequence:
_ExternalSequence.ADCEvent_swigregister(ADCEvent)

class ExtensionListEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_ExternalSequence.ExtensionListEntry_type_get, _ExternalSequence.ExtensionListEntry_type_set)
    ref = property(_ExternalSequence.ExtensionListEntry_ref_get, _ExternalSequence.ExtensionListEntry_ref_set)
    next = property(_ExternalSequence.ExtensionListEntry_next_get, _ExternalSequence.ExtensionListEntry_next_set)

    def __init__(self):
        _ExternalSequence.ExtensionListEntry_swiginit(self, _ExternalSequence.new_ExtensionListEntry())
    __swig_destroy__ = _ExternalSequence.delete_ExtensionListEntry

# Register ExtensionListEntry in _ExternalSequence:
_ExternalSequence.ExtensionListEntry_swigregister(ExtensionListEntry)

EXT_LIST = _ExternalSequence.EXT_LIST
EXT_TRIGGER = _ExternalSequence.EXT_TRIGGER
EXT_ROTATION = _ExternalSequence.EXT_ROTATION
EXT_UNKNOWN = _ExternalSequence.EXT_UNKNOWN
class TriggerEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    duration = property(_ExternalSequence.TriggerEvent_duration_get, _ExternalSequence.TriggerEvent_duration_set)
    delay = property(_ExternalSequence.TriggerEvent_delay_get, _ExternalSequence.TriggerEvent_delay_set)
    triggerType = property(_ExternalSequence.TriggerEvent_triggerType_get, _ExternalSequence.TriggerEvent_triggerType_set)
    triggerChannel = property(_ExternalSequence.TriggerEvent_triggerChannel_get, _ExternalSequence.TriggerEvent_triggerChannel_set)

    def __init__(self):
        _ExternalSequence.TriggerEvent_swiginit(self, _ExternalSequence.new_TriggerEvent())
    __swig_destroy__ = _ExternalSequence.delete_TriggerEvent

# Register TriggerEvent in _ExternalSequence:
_ExternalSequence.TriggerEvent_swigregister(TriggerEvent)

class RotationEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    defined = property(_ExternalSequence.RotationEvent_defined_get, _ExternalSequence.RotationEvent_defined_set)
    rotMatrix = property(_ExternalSequence.RotationEvent_rotMatrix_get, _ExternalSequence.RotationEvent_rotMatrix_set)

    def __init__(self):
        _ExternalSequence.RotationEvent_swiginit(self, _ExternalSequence.new_RotationEvent())
    __swig_destroy__ = _ExternalSequence.delete_RotationEvent

# Register RotationEvent in _ExternalSequence:
_ExternalSequence.RotationEvent_swigregister(RotationEvent)

class EventIDs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_ExternalSequence.EventIDs_id_get, _ExternalSequence.EventIDs_id_set)

    def __init__(self):
        _ExternalSequence.EventIDs_swiginit(self, _ExternalSequence.new_EventIDs())
    __swig_destroy__ = _ExternalSequence.delete_EventIDs

# Register EventIDs in _ExternalSequence:
_ExternalSequence.EventIDs_swigregister(EventIDs)

class SeqBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ExternalSequence.SeqBlock_swiginit(self, _ExternalSequence.new_SeqBlock())

    def isRF(self):
        return _ExternalSequence.SeqBlock_isRF(self)

    def isTrapGradient(self, channel):
        return _ExternalSequence.SeqBlock_isTrapGradient(self, channel)

    def isArbitraryGradient(self, channel):
        return _ExternalSequence.SeqBlock_isArbitraryGradient(self, channel)

    def isADC(self):
        return _ExternalSequence.SeqBlock_isADC(self)

    def isDelay(self):
        return _ExternalSequence.SeqBlock_isDelay(self)

    def isTrigger(self):
        return _ExternalSequence.SeqBlock_isTrigger(self)

    def isRotation(self):
        return _ExternalSequence.SeqBlock_isRotation(self)

    def GetIndex(self):
        return _ExternalSequence.SeqBlock_GetIndex(self)

    def GetEventIndex(self, type):
        return _ExternalSequence.SeqBlock_GetEventIndex(self, type)

    def GetDelay(self):
        return _ExternalSequence.SeqBlock_GetDelay(self)

    def GetDuration(self):
        return _ExternalSequence.SeqBlock_GetDuration(self)

    def GetGradientLength(self, channel):
        return _ExternalSequence.SeqBlock_GetGradientLength(self, channel)

    def GetGradEvent(self, channel):
        return _ExternalSequence.SeqBlock_GetGradEvent(self, channel)

    def GetGradientPtr(self, channel):
        return _ExternalSequence.SeqBlock_GetGradientPtr(self, channel)

    def GetRFEvent(self):
        return _ExternalSequence.SeqBlock_GetRFEvent(self)

    def GetRFLength(self):
        return _ExternalSequence.SeqBlock_GetRFLength(self)

    def GetRFAmplitudePtr(self):
        return _ExternalSequence.SeqBlock_GetRFAmplitudePtr(self)

    def GetRFPhasePtr(self):
        return _ExternalSequence.SeqBlock_GetRFPhasePtr(self)

    def GetADCEvent(self):
        return _ExternalSequence.SeqBlock_GetADCEvent(self)

    def GetTriggerEvent(self):
        return _ExternalSequence.SeqBlock_GetTriggerEvent(self)

    def GetRotationEvent(self):
        return _ExternalSequence.SeqBlock_GetRotationEvent(self)

    def GetTypeString(self):
        return _ExternalSequence.SeqBlock_GetTypeString(self)

    def free(self):
        return _ExternalSequence.SeqBlock_free(self)
    __swig_destroy__ = _ExternalSequence.delete_SeqBlock

# Register SeqBlock in _ExternalSequence:
_ExternalSequence.SeqBlock_swigregister(SeqBlock)

class CompressedShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numUncompressedSamples = property(_ExternalSequence.CompressedShape_numUncompressedSamples_get, _ExternalSequence.CompressedShape_numUncompressedSamples_set)
    samples = property(_ExternalSequence.CompressedShape_samples_get, _ExternalSequence.CompressedShape_samples_set)

    def __init__(self):
        _ExternalSequence.CompressedShape_swiginit(self, _ExternalSequence.new_CompressedShape())
    __swig_destroy__ = _ExternalSequence.delete_CompressedShape

# Register CompressedShape in _ExternalSequence:
_ExternalSequence.CompressedShape_swigregister(CompressedShape)

class ExternalSequence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ExternalSequence.ExternalSequence_swiginit(self, _ExternalSequence.new_ExternalSequence())
    __swig_destroy__ = _ExternalSequence.delete_ExternalSequence

    def load(self, path):
        return _ExternalSequence.ExternalSequence_load(self, path)

    def GetVersion(self):
        return _ExternalSequence.ExternalSequence_GetVersion(self)

    @staticmethod
    def print_msg(level, ss):
        return _ExternalSequence.ExternalSequence_print_msg(level, ss)

    @staticmethod
    def SetPrintFunction(fun):
        return _ExternalSequence.ExternalSequence_SetPrintFunction(fun)

    def GetDefinition(self, key):
        return _ExternalSequence.ExternalSequence_GetDefinition(self, key)

    def GetNumberOfBlocks(self):
        return _ExternalSequence.ExternalSequence_GetNumberOfBlocks(self)

    def GetBlock(self, blockIndex):
        return _ExternalSequence.ExternalSequence_GetBlock(self, blockIndex)

    def decodeBlock(self, block):
        return _ExternalSequence.ExternalSequence_decodeBlock(self, block)

# Register ExternalSequence in _ExternalSequence:
_ExternalSequence.ExternalSequence_swigregister(ExternalSequence)

def ExternalSequence_print_msg(level, ss):
    return _ExternalSequence.ExternalSequence_print_msg(level, ss)

def ExternalSequence_SetPrintFunction(fun):
    return _ExternalSequence.ExternalSequence_SetPrintFunction(fun)



