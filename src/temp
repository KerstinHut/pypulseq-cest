// SimPulseqSBB.i

%module SimPulseqSBB

%{
#define SWIG_FILE_WITH_INIT
#include "SimPulseqSBBTemplate.h"
#include "BlochMcConnellSolver.h"
#include <functional>
#include <numeric>
#include <vector>
//#include "3rdParty/Eigen/Eigen"
//using namespace Eigen;
#include "SimulationParameters.h"
#include "3rdParty/src_ext_seq/ExternalSequence.h"
#define _USE_MATH_DEFINES
#include <cmath>

%}

%include "eigen.i"

%include "SimulationParameterscpp.h"
%include "SimulationParameters.h"
%include "SimPulseqSBB.h"
//void SimPulseqSBB(SimulationParameters& sp, std::string seq_filename);
%include "SimPulseqSBBTemplate.h"
%template(SimPulseqSBBT) SimPulseqSBBTemplate<int>;
// using namespace Eigen;


#!/usr/bin/env python
"""
setup.py file for simulation parameters
"""

from distutils.core import setup, Extension

# Third-party modules - we depend on numpy for everything
import numpy

# Obtain the numpy include directory.  This logic works across numpy versions.
try:
    numpy_include = numpy.get_include()
except AttributeError:
    numpy_include = numpy.get_numpy_include()

SimPulseqSBB_module = Extension('_SimPulseqSBB', sources=['SimPulseqSBB.h',
                                                      'SimPulseqSBB_wrap.cxx'],
                               extra_compile_args=['-Xpreprocessor', '-fopenmp'],
                               extra_link_args=['-lgomp'], # '-lomp' for Mac,  -lgomp for Linux
                               swig_opts=['-threads'],
                               include_dirs=[numpy_include, numpy_include + '/numpy']
                              )

setup(name='SimPulseqSBB',
      version='0.1',
      author="K Heinecke",
      description="""Simulating a seq file""",
      ext_modules=[SimPulseqSBB_module],
      py_modules=["SimPulseqSBB"],
      )
