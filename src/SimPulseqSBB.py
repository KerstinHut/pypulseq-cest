# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SimPulseqSBB
else:
    import _SimPulseqSBB

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


M_PI = _SimPulseqSBB.M_PI
class Scanner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    B0 = property(_SimPulseqSBB.Scanner_B0_get, _SimPulseqSBB.Scanner_B0_set)
    relB1 = property(_SimPulseqSBB.Scanner_relB1_get, _SimPulseqSBB.Scanner_relB1_set)
    B0Inhomogeneity = property(_SimPulseqSBB.Scanner_B0Inhomogeneity_get, _SimPulseqSBB.Scanner_B0Inhomogeneity_set)
    Gamma = property(_SimPulseqSBB.Scanner_Gamma_get, _SimPulseqSBB.Scanner_Gamma_set)

    def __init__(self):
        _SimPulseqSBB.Scanner_swiginit(self, _SimPulseqSBB.new_Scanner())
    __swig_destroy__ = _SimPulseqSBB.delete_Scanner

# Register Scanner in _SimPulseqSBB:
_SimPulseqSBB.Scanner_swigregister(Scanner)

SuperLorentzian = _SimPulseqSBB.SuperLorentzian
Lorentzian = _SimPulseqSBB.Lorentzian
_None = _SimPulseqSBB._None
class WaterPool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SimPulseqSBB.WaterPool_swiginit(self, _SimPulseqSBB.new_WaterPool(*args))
    __swig_destroy__ = _SimPulseqSBB.delete_WaterPool

    def GetR1(self):
        return _SimPulseqSBB.WaterPool_GetR1(self)

    def GetR2(self):
        return _SimPulseqSBB.WaterPool_GetR2(self)

    def GetFraction(self):
        return _SimPulseqSBB.WaterPool_GetFraction(self)

    def SetR1(self, nR1):
        return _SimPulseqSBB.WaterPool_SetR1(self, nR1)

    def SetR2(self, nR2):
        return _SimPulseqSBB.WaterPool_SetR2(self, nR2)

    def SetFraction(self, nf):
        return _SimPulseqSBB.WaterPool_SetFraction(self, nf)

# Register WaterPool in _SimPulseqSBB:
_SimPulseqSBB.WaterPool_swigregister(WaterPool)

class CESTPool(WaterPool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SimPulseqSBB.CESTPool_swiginit(self, _SimPulseqSBB.new_CESTPool(*args))
    __swig_destroy__ = _SimPulseqSBB.delete_CESTPool

    def GetShiftinPPM(self):
        return _SimPulseqSBB.CESTPool_GetShiftinPPM(self)

    def GetExchangeRateInHz(self):
        return _SimPulseqSBB.CESTPool_GetExchangeRateInHz(self)

    def SetShiftinPPM(self, ndw):
        return _SimPulseqSBB.CESTPool_SetShiftinPPM(self, ndw)

    def SetExchangeRateInHz(self, nk):
        return _SimPulseqSBB.CESTPool_SetExchangeRateInHz(self, nk)

# Register CESTPool in _SimPulseqSBB:
_SimPulseqSBB.CESTPool_swigregister(CESTPool)

class MTPool(CESTPool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SimPulseqSBB.MTPool_swiginit(self, _SimPulseqSBB.new_MTPool(*args))
    __swig_destroy__ = _SimPulseqSBB.delete_MTPool

    def GetMTLineShape(self):
        return _SimPulseqSBB.MTPool_GetMTLineShape(self)

    def SetMTLineShape(self, nls):
        return _SimPulseqSBB.MTPool_SetMTLineShape(self, nls)

    def GetMTLineAtCurrentOffset(self, offset, omega0):
        return _SimPulseqSBB.MTPool_GetMTLineAtCurrentOffset(self, offset, omega0)

# Register MTPool in _SimPulseqSBB:
_SimPulseqSBB.MTPool_swigregister(MTPool)

class SimulationParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SimPulseqSBB.SimulationParameters_swiginit(self, _SimPulseqSBB.new_SimulationParameters())
    __swig_destroy__ = _SimPulseqSBB.delete_SimulationParameters

    def SetExternalSequence(self, seq):
        return _SimPulseqSBB.SimulationParameters_SetExternalSequence(self, seq)

    def GetExternalSequence(self):
        return _SimPulseqSBB.SimulationParameters_GetExternalSequence(self)

    def InitMagnetizationVectors(self, M, numOutput):
        return _SimPulseqSBB.SimulationParameters_InitMagnetizationVectors(self, M, numOutput)

    def GetMagnetizationVectors(self):
        return _SimPulseqSBB.SimulationParameters_GetMagnetizationVectors(self)

    def SetWaterPool(self, waterPool):
        return _SimPulseqSBB.SimulationParameters_SetWaterPool(self, waterPool)

    def GetWaterPool(self):
        return _SimPulseqSBB.SimulationParameters_GetWaterPool(self)

    def InitCESTPoolMemory(self, numPools):
        return _SimPulseqSBB.SimulationParameters_InitCESTPoolMemory(self, numPools)

    def SetCESTPool(self, cp, poolIdx):
        return _SimPulseqSBB.SimulationParameters_SetCESTPool(self, cp, poolIdx)

    def GetCESTPool(self, poolIdx):
        return _SimPulseqSBB.SimulationParameters_GetCESTPool(self, poolIdx)

    def SetMTPool(self, cp):
        return _SimPulseqSBB.SimulationParameters_SetMTPool(self, cp)

    def GetMTPool(self):
        return _SimPulseqSBB.SimulationParameters_GetMTPool(self)

    def InitScanner(self, *args):
        return _SimPulseqSBB.SimulationParameters_InitScanner(self, *args)

    def GetScannerB0(self):
        return _SimPulseqSBB.SimulationParameters_GetScannerB0(self)

    def GetScannerRelB1(self):
        return _SimPulseqSBB.SimulationParameters_GetScannerRelB1(self)

    def GetScannerB0Inhom(self):
        return _SimPulseqSBB.SimulationParameters_GetScannerB0Inhom(self)

    def GetScannerGamma(self):
        return _SimPulseqSBB.SimulationParameters_GetScannerGamma(self)

    def IsMTActive(self):
        return _SimPulseqSBB.SimulationParameters_IsMTActive(self)

    def GetNumberOfCESTPools(self):
        return _SimPulseqSBB.SimulationParameters_GetNumberOfCESTPools(self)

    def SetVerbose(self, v):
        return _SimPulseqSBB.SimulationParameters_SetVerbose(self, v)

    def IsVerbose(self):
        return _SimPulseqSBB.SimulationParameters_IsVerbose(self)

    def SetUseInitMagnetization(self, initMag):
        return _SimPulseqSBB.SimulationParameters_SetUseInitMagnetization(self, initMag)

    def GetUseInitMagnetization(self):
        return _SimPulseqSBB.SimulationParameters_GetUseInitMagnetization(self)

    def SetMaxNumberOfPulseSamples(self, numSamples):
        return _SimPulseqSBB.SimulationParameters_SetMaxNumberOfPulseSamples(self, numSamples)

    def GetMaxNumberOfPulseSamples(self):
        return _SimPulseqSBB.SimulationParameters_GetMaxNumberOfPulseSamples(self)

# Register SimulationParameters in _SimPulseqSBB:
_SimPulseqSBB.SimulationParameters_swigregister(SimulationParameters)

MAX_CEST_POOLS = _SimPulseqSBB.MAX_CEST_POOLS

def SimPulseqSBB(sp, seq_filename):
    return _SimPulseqSBB.SimPulseqSBB(sp, seq_filename)


